{"numero":"12","nombre":"Arrays","explicacionJS":{"Titulo":"Mi explicación de JS","Codigo":{"LenguajeDeProgramacion":"JavaScript","Codigo":"const form = document.querySelector('form');\nconst input = document.querySelector('#new-task-input');\nconst taskList = document.querySelector('#task-list');\n\nlet tasks = [];\n\nfunction renderTasks() {\n  taskList.innerHTML = '';\n  tasks.forEach((task, index) => {\n    const li = document.createElement('li');\n    li.classList.add('task');\n    if (task.completed) {\n      li.classList.add('completed');\n    }\n    const checkbox = document.createElement('input');\n    checkbox.setAttribute('type', 'checkbox');\n    checkbox.checked = task.completed;\n    checkbox.addEventListener('change', (event) => {\n      tasks[index].completed = event.target.checked;\n      renderTasks();\n    });\n    const label = document.createElement('label');\n    label.textContent = task.title;\n    label.addEventListener('dblclick', () => {\n      const newTitle = prompt('Editar tarea', task.title);\n      if (newTitle !== null && newTitle.trim() !== '') {\n        tasks[index].title = newTitle;\n        renderTasks();\n      }\n    });\n    const deleteButton = document.createElement('span');\n    deleteButton.classList.add('delete-task');\n    deleteButton.innerHTML = '&times;';\n    deleteButton.addEventListener('click', () => {\n      tasks.splice(index, 1);\n      renderTasks();\n    });\n    li.appendChild(checkbox);\n    li.appendChild(label);\n    li.appendChild(deleteButton);\n    taskList.appendChild(li);\n  });\n}\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const title = input.value.trim();\n  if (title !== '') {\n    tasks.push({ title, completed: false });\n    input.value = '';\n    renderTasks();\n  }\n});\n\nrenderTasks();\n"},"Descripcion":"<ul><li><p><code>querySelector</code>: Este método permite obtener una referencia a un elemento HTML en la página a partir de un selector CSS. En este caso, se usa para obtener referencias al formulario, al campo de texto y a la lista de tareas.</p></li><li><p><code>addEventListener</code>: Este método permite agregar un listener de evento a un elemento HTML, que se activará cuando ocurra un evento específico (como un clic, una pulsación de tecla, etc.). En este caso, se usan varios listeners de eventos para manejar las interacciones del usuario con la lista de tareas.</p></li><li><p><code>createElement</code>: Este método permite crear un nuevo elemento HTML en la página. En este caso, se usan varios llamados a <code>createElement</code> para crear elementos como <code>li</code>, <code>input</code>, <code>label</code>, y <code>span</code>.</p></li><li><p><code>appendChild</code>: Este método permite agregar un elemento hijo a otro elemento HTML. En este caso, se usan llamados a <code>appendChild</code> para agregar elementos creados con <code>createElement</code> a la lista de tareas.</p></li><li><p><code>setAttribute</code>: Este método permite establecer el valor de un atributo HTML en un elemento. En este caso, se usa para establecer el tipo de un <code>input</code> como \"checkbox\".</p></li><li><p><code>classList</code>: Esta propiedad de un elemento HTML representa la lista de clases CSS aplicadas a ese elemento. En este caso, se usan varios llamados a <code>classList</code> para agregar o quitar clases de los elementos HTML para cambiar su apariencia en la página.</p></li><li><p><code>forEach</code>: Este método permite recorrer un array y ejecutar una función para cada elemento. En este caso, se usa para recorrer el array <code>tasks</code> y crear un elemento HTML para cada tarea.</p></li><li><p><code>splice</code>: Este método permite eliminar elementos de un array en base a su índice. En este caso, se usa para eliminar una tarea del array <code>tasks</code> cuando el usuario hace clic en el botón de eliminación.</p></li><li><p><code>prompt</code>: Este método muestra un cuadro de diálogo que le pide al usuario que ingrese algún valor. En este caso, se usa para pedirle al usuario que ingrese un nuevo título para una tarea existente cuando hace doble clic en el título de la tarea.</p></li><li><p><code>innerHTML</code> y <code>textContent</code>: Estas propiedades de un elemento HTML representan el contenido HTML o de texto del elemento, respectivamente. En este caso, se usan para establecer el contenido de elementos como <code>li</code> y <code>label</code>.</p></li></ul>"},"explicacionHTML":{"Titulo":"Mi explicación de HTML","Codigo":{"LenguajeDeProgramacion":"HTML","Codigo":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Lista de Tareas</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <h1>Lista de Tareas</h1>\n  <div id=\"app\">\n    <form>\n      <input type=\"text\" placeholder=\"Agregar nueva tarea\" id=\"new-task-input\">\n      <button type=\"submit\">Agregar</button>\n    </form>\n    <ul id=\"task-list\"></ul>\n  </div>\n  <script src=\"script.js\"></script>\n</body>\n</html>"},"Descripcion":"<ul><li><p>El HTML define la estructura básica de la página, incluyendo el <code>head</code> (que contiene metadatos como el título de la página y referencias a estilos CSS y scripts JavaScript), y el <code>body</code> (que contiene el contenido visible de la página).</p></li><li><p>El HTML define los elementos de la página que permiten al usuario interactuar con la lista de tareas, incluyendo el formulario de entrada de nuevas tareas, la lista de tareas en sí, y los botones y elementos de entrada que permiten editar y eliminar tareas existentes.</p></li><li><p>El HTML utiliza clases CSS para definir estilos y aspecto visual de la página, como el tamaño y la fuente del texto, el color de fondo de la página y la lista de tareas, y otros detalles visuales.</p></li><li><p>El HTML utiliza atributos y eventos para conectar los elementos visuales de la página con el código JavaScript que se encarga de manejar la interacción del usuario con la lista de tareas.</p></li></ul>"},"explicacionCSS":{"Titulo":"Mi explicación de CSS","Codigo":{"LenguajeDeProgramacion":"CSS","Codigo":"body {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  text-align: center;\n}\n\n#app {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nform {\n  display: flex;\n  margin-bottom: 20px;\n}\n\ninput[type=\"text\"] {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-right: none;\n  border-radius: 4px 0 0 4px;\n}\n\nbutton[type=\"submit\"] {\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-left: none;\n  border-radius: 0 4px 4px 0;\n  background-color: #f1f1f1;\n  cursor: pointer;\n}\n\nul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\nli {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #f1f1f1;\n  border-radius: 4px;\n}\n\nli.completed {\n  background-color: #d3d3d3;\n}\n\nli .task {\n  flex: 1;\n}\n\nli .delete-task {\n  margin-left: auto;\n  cursor: pointer;\n}\n"},"Descripcion":"<ul><li>Se establece un fondo gris claro (<code>#f6f6f6</code>) para el cuerpo de la página.</li><li>El formulario de ingreso de tareas tiene un fondo blanco, un borde redondeado y una sombra.</li><li>El campo de texto utilizado para ingresar tareas tiene un borde redondeado, una sombra y se expande para ocupar todo el ancho disponible.</li><li>La lista de tareas no tiene viñetas y cada tarea tiene un fondo blanco, un borde redondeado, una sombra y se muestra en formato de caja flexible con el contenido justificado y centrado verticalmente.</li><li>Los botones tienen un fondo blanco, un borde redondeado, un relleno y un cursor de puntero.</li></ul>"},"embed":"https://jsfiddle.net/uristoteles/tr2o31Lk/2/","descripcionGeneral":"Miniprograma que te permite crear tareas y guardarlas en un array."}